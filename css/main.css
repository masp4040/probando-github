body{
    background-image: url(../images/developer.webp);
    background-repeat: no-repeat;
    background-size: 100% 100vh;
}

.header{
    width: 100%;
    background-color: rgb(230, 228, 227);
    height: 50px;
}

.header> h1{
    padding-top: 5px;
    width: 500px;
    margin-left: auto;
    margin-right: auto;
    color: rgb(75, 74, 74);
}


.content{
    margin-top: 50px;
    width: 50%;
    margin-left: auto;
    margin-right: auto;
    height: 100px;
    background-color: #fff;
    padding: 50px;
}

USER.TS

import conectarBD from './db/db';
import { UserModel } from './models/user';
import { Enum_Rol } from './models/enums';

const main = async()=>{
    await conectarBD();


// CRUD USUARIOS


//CREAR USUARIO

    UserModel.create({
        nombre:"Alejandro",
        apellido:"Zapata",
        identificacion:"10203090",
        rol:Enum_Rol.estudiante,
        correo:"alejo@gmail.com",
              
        
    })
    .then((u) =>{
        console.log('usuario creado', u);

    })
    .catch((e)=>{
        console.error('Error creando el usuario',e);
    }); 

    ///OBTENER LOS USUARIOS

    // await UserModel.find().then((u)=>{
    //     console.log('usuarios',u);
    // }).catch(e=>{
    //     console.error('error obteniendo los usuarios',e);
    // })  

    //OBTENER UN SOLO USUARIO

    // await UserModel.findOne({identificacion:"10203050"})
    // .then((u)=>{
    //     console.log('usuario encontrado',u);
    // })
    // .catch((e)=>{
    //     console.error(e);
    // });

    //EDITAR UN USUARIO

    //  await UserModel.findOneAndUpdate(
    //     {correo:'miguel@hotmail.com'},
    //     {
    //     nombre:'juan',
    // }).then((u)=>{
    //     console.log('usuario actualizado',u);

    // }).catch(e=>{
    //     console.error('error actualizando',e)
    // });
 
    //ELIMINAR USUARIO
    
    // await UserModel.findOneAndDelete({correo:'miguel@hotmail.com'})
    // .then((u)=>{
    //     console.log('usuario eliminado',u);
    // })
    // .catch((e)=>{
    //     console.error(e);
    // });
};

main();
desde aca va en el user
import { Schema, model } from "mongoose";
 import {Enum_Rol , Enum_EstadoUsuario} from './enums';

 

 interface user{
     correo:string,
     identificacion:string,
     nombre:string,
     apellido:string,
     rol:Enum_Rol,
     estado:Enum_EstadoUsuario;
     }

 

const userSchema = new Schema<user>({

    nombre:{
        type:String,
        required:true,
    },

    apellido:{
        type:String,
        required:true,
    },

    identificacion:{
        type:String,
        required:true,
        unique:true,
    },

    rol:{
        type:String,
        required:true,
        enum:Enum_Rol,
    },

    correo:{
        type:String,
        required: true,
        unique:true,
        validate:{
            validator:(email)=>{
                if(email.includes('@')&& email.includes('.')){
                    return true;
                }
                else{
                    return false;
                }

            },
            message:'el formato del correo electronico es incorrecto',
        },
       
    },
    
      
    estado:{
        type:String,
        enum:Enum_EstadoUsuario,
        default:Enum_EstadoUsuario.pendiente,
    }

    
});

const UserModel = model('User', userSchema, 'Usuarios');

export  {UserModel}; 

enums
enum Enum_Rol{
    estudiante="Estudiante",
    lider="Lider",
    administrador="Administrador",
}

enum Enum_EstadoUsuario{
    pendiente="Pendiente",
    autorizado="Autorizado",
    no_autorizado="No Autorizado",
}

export {Enum_Rol, Enum_EstadoUsuario};
********
import { Schema, model } from "mongoose";
import { ProjectModel } from "./project";
import { UserModel } from "./project";


interface Avance{
    
    fecha:Date;
    descripcion:string;
    observaciones: [string];
    proyecto:Schema.Types.ObjectId;
    creadoPor: Schema.Types.ObjectId;
}


const advancementShema= new Schema<Avance>({
    fecha:{
        type:Date,
        required:true,
    },

    descripcion:{
        type:String,
        required:true,
    },
    observaciones:[
        {
            type:String,
    },
    ],
    proyecto:{
        type: Schema.Types.ObjectId,
        ref: ProjectModel,
        required:true,

    },
    creadoPor:{
        type: Schema.Types.ObjectId,
        ref: UserModel,
        required:true,

    },
});

